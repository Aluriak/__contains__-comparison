"""
Plotting using pandas and matplotlib.

All generated graphics are pushed in the results/ directory,
under the name benchmark_a_b_c_d.png where a is the data type,
b the number of call per case, c the minimal data size and d the maximal one.

"""

import csv
from collections import defaultdict
import itertools

import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.pyplot import savefig

from benchmark import (CSV_FIELDS, DEFAULT_CSV_FILENAME, DATA_TYPES,
                       RUN_NUMBER, DATA_SIZE_MIN, DATA_SIZE_MAX)


DEFAULT_FIGURE_NAME = 'results/benchmark_{}_{}_{}_{}.png'
DEFAULT_TITLE = 'Benchmark for {} elements'
DEFAULT_XLABEL = 'Number of {} element in container'
DEFAULT_YLABEL = 'container.__contains__ method performance'


def plots(csv_filename, title, xlabel, ylabel,
          dpi=400, savefile=True, show=True):
    """Generate the plot that show all the data generated by the benchmark"""

    # get the data
    with open(csv_filename) as fd:
        data = defaultdict(list)
        for line in csv.DictReader(fd):
            for column, value in line.items():
                data[column].append(value)
        data = {k: tuple(float(v) for v in vs) for k, vs in data.items()}
        # convert in pandas data frame for allow plotting
        gx = pd.DataFrame(dict(data), columns=CSV_FIELDS[1:], index=data[CSV_FIELDS[0]])
        print(gx)

    # blue, red, yellow, black, magenta and green color for each container,
    # with a circle or a cross for existing or missing item
    styles = [a + b + '-' for a, b in itertools.product('brykmg', 'ox')]

    plot = gx.plot(style=styles)
    lines, labels = plot.get_legend_handles_labels()

    plot.legend(lines, labels)
    plot.set_xlabel(xlabel)
    plot.set_ylabel(ylabel)

    if savefile:
        plt.savefig(savefile, dpi=dpi)
        print('Plot of statistics data saved in file ' + savefile
              + ' (' + str(dpi) + ' dpi)')
    if show:
        plt.show()


if __name__ == '__main__':
    for datatype in DATA_TYPES:
        figure_name = DEFAULT_FIGURE_NAME.format(datatype.__name__, RUN_NUMBER,
                                                 DATA_SIZE_MIN, DATA_SIZE_MAX)
        plots(
            DEFAULT_CSV_FILENAME.format(datatype.__name__),
            savefile=figure_name,
            title=DEFAULT_TITLE.format(datatype.__name__),
            xlabel=DEFAULT_XLABEL.format(datatype.__name__),
            ylabel=DEFAULT_YLABEL.format(datatype.__name__),
        )
